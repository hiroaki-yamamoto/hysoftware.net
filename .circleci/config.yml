version: 2
jobs:
  build:
    working_directory: ~/hysoftware
    docker:
      - image: node:latest
        environment:
          node_mode: production
        steps:
          - checkout
          - restore_cache:
              keys:
                - hysoftware-{{ .Branch }}-{{ checksum "yarn.lock" }}
          - run:
              name: "Install Frontend Dependencies"
              command: |
                yarn --ignore-scripts &&
                npm rebuild node-sass &&
                yarn run install -- --allow-root
          - save_cache:
              key: hysoftware-{{ .Branch }}-{{ checksum "yarn.lock" }}
              paths:
                - "~/.yarn-cache"
                - "/tmp/hysoftware/node_modules"
          - run:
              name: "Build the script"
              command: npm run test
          - persist_to_workspace:
              root: ../
              paths:
                - hysoftware
  backend_test:
    docker:
      - image: python:latest
        environment:
          DJANGO_SETTINGS_FACTORY: app.settings.testing.TestConfig
          RECAPTCHA_TESTING: "True"
          DB_DEFAULT_ENGINE: "django.db.backends.postgresql"
          DB_DEFAULT_NAME: circleci
          DB_DEFAULT_USER: circleci
          DB_DEFAULT_PASSWORD: circleci
          DB_DEFAULT_HOST: localhost
          DB_DEFAULT_PORT: 5432
      - image: postgres:latest
        environment:
          POSTGRES_DB: circleci
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
    working_directory: /tmp/hysoftware
    steps:
      - attach_workspace:
          at: ../
      - run:
          name: "Install codeclimate-reporter, unzip, Rsync"
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - restore_cache:
          keys:
            - hysoftware-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: "Make virtual environemnt"
          command: "python -m venv venv"
      - run:
          name: "Install backend dependencies"
          command: |
            source ./venv/bin/activate &&
            pip install -r requirements.txt &&
            pip install awscli
            deactivate
      - save_cache:
          key: hysoftware-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "./venv"
      - run:
          name: "Migrate"
          command: |
            source ./venv/bin/activate &&
            python manage.py migrate
      - run:
          name: "Test"
          command: |
            ./cc-test-reporter before-build
            $(npm bin)/gulp django.test
            export EXIT_CODE=${?}
            source ./venv/bin/activate
            coverage xml
            deactivate
            ./cc-test-reporter after-build -t coverage.py --exit-code=${EXIT_CODE}
      - persist_to_workspace:
          root: ../
          paths:
            - hysoftware
  artifact:
    docker:
      - image: ubuntu:latest
    working_directory: ~/hysoftware
    steps:
      - attach_workspace:
          at: ../
      - run: mkdir ../artifacts
      - run:
          name: "Making release zip"
          command: |
            git checkout -b deploy> /dev/null 2>&1

            sed -i -E \
              -e '/app\/\*\*\/(jinja2|static)\/\*\.(css|js)/d' .gitignore

            git add --all . > /dev/null 2>&1
            git config --global user.email "build@circleci" > /dev/null 2>&1
            git config --global user.name "CIRCLE CI" > /dev/null 2>&1
            git commit -m "Release for ${CIRCLE_SHA1}" > /dev/null 2>&1
            if [ -n "${CIRCLE_TAG}" ]; then
              git archive --format zip \
                -o ../artifacts/deploy-${CIRCLE_TAG}.zip HEAD
              node deploy.js ../artifacts/deploy-${CIRCLE_TAG}.zip
            else
              git archive --format zip \
                -o ../artifacts/deploy-${CIRCLE_BUILD_NUM}.zip HEAD
            fi
            git archive --format zip -o ../artifacts/deploy-${CIRCLE_BUILD_NUM}.zip HEAD
      - store_artifacts:
          path: ../artifacts
          destination: artifacts
      - persist_to_workspace:
          root: ../
          paths:
            - hysoftware
            - artifacts
  deploy:
    docker:
      - image: ubuntu:latest
    working_directory: ~/hysoftware
    steps:
      - attach_workspace:
          at: ../
      - run: bash .circleci/setup-heroku.sh
      - add_ssh_keys:
          fingerprints:
            - "b0:97:fb:d3:79:2c:a8:28:56:d7:51:65:e6:49:04:15"
      - run:
          name: Deploy Master to Heroku
          command: |
            cd ../
            git clone https://git.heroku.com/hysoftware.git heroku-deploy
            mv heroku-deploy/.git ./git
            mkdir hysoftware-b
            cd hysoftware-b
            unzip ../artifacts/deploy-${CIRCLE_TAG}.zip
            rsync --delete -aP . ../heroku-deploy
            cd ../heroku-deploy
            rm -fr ../hysoftware-b
            mv ../git ./.git
            rm -rf .gitignore
            git config --global user.email "build@circleci" > /dev/null 2>&1
            git config --global user.name "CIRCLE CI" > /dev/null 2>&1
            git add --all . > /dev/null 2>&1
            git commit -m "Release for ${CIRCLE_SHA1}" > /dev/null 2>&1
            git push origin master

workflows:
  workflows:
    version: 2
    default:
      jobs:
        - build:
            filters:
              tags:
                ignore: /^(?:[0-9]+\.){2}[0-9].*/
        - backend_test:
            requires:
              - build
        - artifact:
            requires:
              - build
              - backend_test
    version_tag:
      jobs:
        - build:
            filters:
              tags:
                only: /^(?:[0-9]+\.){2}[0-9].*/
              branches:
                ignore: /.*/
        - backend_test:
            requires:
              - build
        - artifact:
            requires:
              - build
              - backend_test
        - deploy:
            requires:
              - artifact
