version: 2
jobs:
  build:
    docker:
      - image: python:latest
        environment:
          DJANGO_SETTINGS_FACTORY: app.settings.testing.TestConfig
          RECAPTCHA_TESTING: "True"
          node_mode: production
          DB_DEFAULT_ENGINE: "django.db.backends.postgresql"
          DB_DEFAULT_NAME: circleci
          DB_DEFAULT_USER: circleci
          DB_DEFAULT_PASSWORD: circleci
          DB_DEFAULT_HOST: localhost
          DB_DEFAULT_PORT: 5432
      - image: postgres:latest
        environment:
          POSTGRES_DB: circleci
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
    working_directory: ~/hysoftware
    steps:
      - checkout
      - run:
          name: "Install codeclimate-reporter, unzip, Rsync, NodeJS and Yarn"
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            curl -sL https://deb.nodesource.com/setup_8.x | bash -
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
            apt-get update -qq
            apt-get install -y -qq nodejs yarn rsync unzip
      - restore_cache:
          keys:
            - hysoftware-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - hysoftware-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: "Install Frontend Dependencies"
          command: |
            yarn --ignore-scripts &&
            npm rebuild node-sass &&
            yarn run install -- --allow-root
      - run:
          name: "Make virtual environemnt"
          command: "python -m venv venv"
      - run:
          name: "Install backend dependencies"
          command: |
            source ./venv/bin/activate &&
            pip install -r requirements.txt &&
            pip install awscli
            deactivate
      - save_cache:
          key: hysoftware-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - "~/.yarn-cache"
      - save_cache:
          key: hysoftware-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "./venv"
      - run:
          name: "Migrate"
          command: |
            source ./venv/bin/activate &&
            python manage.py migrate
      - run:
          name: "Hook Codeclimate Coverage Reporter"
          command: ./cc-test-reporter before-build
      - run:
          name: "[Frontend] Test&Compile"
          command: $(npm bin)/gulp
      - run:
          name: "[Backend] Test"
          command: |
            $(npm bin)/gulp django.test
            ./cc-test-reporter format-coverage ./.coverage -t coverage.py --output "../coverage/backend.json"
      - run:
          name: "Unhook & send coverage report to code climate"
          command: |
            ./cc-test-reporter sum-coverage --output - --parts 1 ../coverage/*.json | \
            ./cc-test-reporter upload-coverage --input -
      - run: mkdir ../artifacts
      - run:
          name: "Making Relase ZIP"
          command: |
            git checkout -b deploy> /dev/null 2>&1

            sed -i -E \
              -e '/app\/\*\*\/(jinja2|static)\/\*\.(css|js)/d' .gitignore

            git add --all . > /dev/null 2>&1
            git config --global user.email "build@circleci" > /dev/null 2>&1
            git config --global user.name "CIRCLE CI" > /dev/null 2>&1
            git commit -m "Release for ${CIRCLE_SHA1}" > /dev/null 2>&1

            if [ -n "${CIRCLE_TAG}" ]; then
              git archive --format zip \
                -o ../artifacts/deploy-${CIRCLE_TAG}.zip HEAD
              node deploy.js ../artifacts/deploy-${CIRCLE_TAG}.zip
            else
              git archive --format zip \
                -o ../artifacts/deploy-${CIRCLE_BUILD_NUM}.zip HEAD
            fi
      - run: bash .circleci/setup-heroku.sh
      - add_ssh_keys:
          fingerprints:
            - "b0:97:fb:d3:79:2c:a8:28:56:d7:51:65:e6:49:04:15"
      - run:
          name: Deploy Master to Heroku
          command: |
            if [ -n "${CIRCLE_TAG}" ]; then
              cd ../
              git clone https://git.heroku.com/hysoftware.git heroku-deploy
              mv heroku-deploy/.git ./git
              mkdir hysoftware-b
              cd hysoftware-b
              unzip ../artifacts/deploy-${CIRCLE_TAG}.zip
              rsync --delete -aP . ../heroku-deploy
              cd ../heroku-deploy
              rm -fr ../hysoftware-b
              mv ../git ./.git
              rm -rf .gitignore
              git config --global user.email "build@circleci" > /dev/null 2>&1
              git config --global user.name "CIRCLE CI" > /dev/null 2>&1
              git add --all . > /dev/null 2>&1
              git commit -m "Release for ${CIRCLE_SHA1}" > /dev/null 2>&1
              git push origin master
            fi
      - store_artifacts:
          path: ../artifacts
          destination: artifacts
deployment:
  release:
    tag: /.*/
    commands:
      - ;
